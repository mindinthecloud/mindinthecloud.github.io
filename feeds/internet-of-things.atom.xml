<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Thoughts in the cloud</title><link href="https://mindinthecloud.github.io/" rel="alternate"></link><link href="https://mindinthecloud.github.io/feeds/internet-of-things.atom.xml" rel="self"></link><id>https://mindinthecloud.github.io/</id><updated>2016-10-20T00:00:00+02:00</updated><entry><title>The roles of the owner of an IoT device, expressed in UML</title><link href="https://mindinthecloud.github.io/2016/10/the-roles-of-the-owner-of-an-iot-device-expressed-in-uml/" rel="alternate"></link><published>2016-10-20T00:00:00+02:00</published><author><name>Rick Veenstra</name></author><id>tag:mindinthecloud.github.io,2016-10-20:2016/10/the-roles-of-the-owner-of-an-iot-device-expressed-in-uml/</id><summary type="html">&lt;p&gt;In a previous blog post we mentioned the different roles of the consumer owning an IoT device. In this article we will try to illustrate these roles in &lt;span class="caps"&gt;UML&lt;/span&gt; Use Case diagrams. The Use Case diagram is one of the several types of models that are part of the Unified Modeling Language (see wikipedia). These are used to describe the interactions of actors with a piece of&amp;nbsp;software.&lt;/p&gt;
&lt;p&gt;We will start with the most basic model. An actor (the consumer) uses a service (via an internet connection). This service is provided by &amp;#8212;you guessed it&amp;#8212; a service&amp;nbsp;provider.&lt;/p&gt;
&lt;img alt="uml diagram" class="uml" src="https://mindinthecloud.github.io/images/5cea17f3.png" /&gt;
&lt;p&gt;Pretty basic, even if you are not into &lt;span class="caps"&gt;UML&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The next step we add the fact that the service depends on data provided by the consumer. He now has two roles: that of the user of the service and that of the provider of data. In the Use Case diagram we show this by adding the role above the icon of each&amp;nbsp;actor.&lt;/p&gt;
&lt;img alt="uml diagram" class="uml" src="https://mindinthecloud.github.io/images/411b5d41.png" /&gt;
&lt;div class="section" id="the-role-consumer"&gt;
&lt;h2&gt;The role &lt;em&gt;&amp;#8216;consumer&amp;#8217;&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;For someone who is used to talk about services in a software context, a little confusion creeps in. The label &lt;em&gt;&amp;#8216;consumer&amp;#8217;&lt;/em&gt; in an economical/marketing context is quite clear. It is used for individual people purchasing goods. In the world of digital services, the label &lt;em&gt;&amp;#8216;consumer&amp;#8217;&lt;/em&gt; is used in a more generic way. In this case it is used for any object (usually some kind of software) that uses the output of a service. Since we somewhat blend these two meanings we will now use the name &amp;#8220;John Doe&amp;#8221; for the individual that uses services in the Internet of Things. One of his &lt;em&gt;roles&lt;/em&gt; is &lt;em&gt;&amp;lt;&amp;lt;service consumer&amp;gt;&amp;gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Back to the diagrams. The data provided by the customer (now identified as &amp;#8220;John Doe&amp;#8221;) is stored and processed by the Service. These are two separate activities, so we model the service as a&amp;nbsp;group:&lt;/p&gt;
&lt;img alt="uml diagram" class="uml" src="https://mindinthecloud.github.io/images/b9fa54df.png" /&gt;
&lt;p&gt;We now have a basic model of a generic service that is provided over the internet by a service provider, that depends on data provided by the end&amp;nbsp;user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="data-processing"&gt;
&lt;h2&gt;Data&amp;nbsp;processing&lt;/h2&gt;
&lt;p&gt;We&amp;#8217;ll add one additional element. In the previous diagram John Doe uses &amp;#8216;data processing&amp;#8217;. While technically correct, an average John Doe is not likely attracted to use &amp;#8216;data processing&amp;#8217;. In business manegement lingo, the service provides &amp;#8216;added value&amp;#8217; to John Doe; something (not strictly defined) that he recognises as having value for&amp;nbsp;him.&lt;/p&gt;
&lt;img alt="uml diagram" class="uml" src="https://mindinthecloud.github.io/images/cc856137.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="paying-for-the-service"&gt;
&lt;h2&gt;Paying for the&amp;nbsp;service&lt;/h2&gt;
&lt;p&gt;Well, you apparently are still with us. Up to this point things have been straight forward. Now we add somthing a little complicating. No service can exisist on it&amp;#8217;s own. Providing a service comes at a cost. In the context of digital services and the Internet of Things this at least requires computer equipment and network connections. So we factor in than John Doe pays the Service Provider for delivering the&amp;nbsp;service.&lt;/p&gt;
&lt;img alt="uml diagram" class="uml" src="https://mindinthecloud.github.io/images/cb7d6d51.png" /&gt;
&lt;div class="section" id="sidestep-paying-for-a-free-service"&gt;
&lt;h3&gt;Sidestep: paying for a free&amp;nbsp;service?&lt;/h3&gt;
&lt;p&gt;Now you may object: I&amp;#8217;m using quite a lot of web applications that I do not have to pay for. Say
Google, Twitter, Facebook, you name &amp;#8216;em. So why adding this last step? Well, There is a lot to say
about &amp;#8216;free&amp;#8217; services. That is subject for another post (or even a series). But let me assure you:
you are actually paying for these services, one way or another. It might not be by actually
transfering money (as with subscription based services), but you are generating value for the service
provider while using the&amp;nbsp;service:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Your usage of the services adds to the momentum and userbase for the service provider´s
paid services which cover for the cost of the free services as&amp;nbsp;well.&lt;/li&gt;
&lt;li&gt;You generate content you license to the provider (this happens more often than you think;
read the fine print in the end user agreements or whatever fancy name they gave these legal&amp;nbsp;statements).&lt;/li&gt;
&lt;li&gt;You allow the service provider to use your data to build profiles that it will monetize to its
own discretion, i.e. targeted advertising. This case is covered by the saying &lt;em&gt;&amp;#8220;if you don´t pay f
or the product, you&lt;/em&gt; &lt;strong&gt;are&lt;/strong&gt; &lt;em&gt;the product&amp;#8221;&lt;/em&gt;. Usually this involves Personally Identifiable
Information (&lt;span class="caps"&gt;PII&lt;/span&gt; for&amp;nbsp;short).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This reasoning implies that we need to add another role for our dear John Doe: the data&amp;nbsp;subject&lt;/p&gt;
&lt;img alt="uml diagram" class="uml" src="https://mindinthecloud.github.io/images/95597d25.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-how-the-data-is-generated"&gt;
&lt;h2&gt;Next: How the data is&amp;nbsp;generated&lt;/h2&gt;
&lt;p&gt;We have described a model for a generic service that is using data provided by the consumer, John Doe. This model can be applied to many web applications. The data is usually generated interactively by the user via the application&amp;#8217;s web interface, from another application using a published &lt;span class="caps"&gt;API&lt;/span&gt; or by means of an app on a mobile device. But what we call the &amp;#8216;Internet of Things&amp;#8217; extends this model. Human interaction is replaced by smart devices that autonomously generate&amp;nbsp;data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-device"&gt;
&lt;h2&gt;The&amp;nbsp;device&lt;/h2&gt;
&lt;p&gt;We will first focus on the device and leave the service out (for&amp;nbsp;now).&lt;/p&gt;
&lt;img alt="uml diagram" class="uml" src="https://mindinthecloud.github.io/images/9cb82da1.png" /&gt;
&lt;p&gt;Again a very basic start, but not for&amp;nbsp;long.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sidestep-the-device-and-it-s-software-a-k-a-firmware"&gt;
&lt;h2&gt;Sidestep: The device and it&amp;#8217;s software a.k.a.&amp;nbsp;firmware&lt;/h2&gt;
&lt;p&gt;All devices in the Internet of Things are built as a combination of hardware and software. The time that his software was &amp;#8216;burned&amp;#8217; into the hardware and could only be changed by physically interacting with the hardware has long gone by. The original &lt;a class="reference external" href="https://en.wikipedia.org/wiki/EPROM"&gt;EPROMs&lt;/a&gt; could only be reprogrammed after erasing them by exposing the hardware to strong ultraviolet light. The introduction of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/EEPROM"&gt;EEPROMs&lt;/a&gt; allowed electronic equipment to be reprogrammed electronically. Now nearly all devices have substantial amounts of non-volatile memory that holds the software that control the device&amp;#8217;s functions. This software can be usually be replaced remotely; the process is called &amp;#8216;flashing&amp;#8217;, named after &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Flash_memory"&gt;the type of memory involved&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-maintenance-burden"&gt;
&lt;h2&gt;The maintenance&amp;nbsp;burden&lt;/h2&gt;
&lt;p&gt;Every device man has created requires maintenance. It&amp;#8217;s the law. Not a legal one, but a law of nature. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Second_law_of_thermodynamics"&gt;The second law of thermodynamics&lt;/a&gt; to be precise. Everything in the universe tends to &amp;#8216;a state of maximum entropy&amp;#8217;, which is a physics scholar&amp;#8217;s lingo for &amp;#8216;chaos&amp;#8217;. We all experience this daily: everything eventually breaks in parts. If you wait long enough, these parts break into smaller and smaller chunks, until only atoms are left. At least, that&amp;#8217;s the simplified version of the&amp;nbsp;theory.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, you&amp;#8217;ll have to wait a veeeeeery long time before your device turns into dust, but you get the picture. Anything man creates will degrade over time. Ignore your housecleaning chores long enough and your furniture will get covered with dust. We all have experience with electronic devices getting to behave erratic or not at all. We can&amp;#8217;t prevent this degradation but we can (try to) postpone it by regular maintenance. Therefore our cars (mostly) get regular oil changes and while the tires evetually wear out we try to keep them balanced and sufficiently&amp;nbsp;inflated.&lt;/p&gt;
&lt;p&gt;This maintenance burden comes with the ownership of &lt;em&gt;any&lt;/em&gt; device. For a device in the world of IoT this burden comes in two areas: firmware and configuration. Firmware is actually just software, but tightly coupled to the hardware. Firmware is usually not intended to be installed or modified by the owner of the device as we are used to with our desktops and laptops. Depending of the functionality it has configuration settings that can be changed by the owner or user of the &amp;#8216;thing&amp;#8217;. Configuration requires at least a basic understanding of the usage of the device and can be done&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;In our diagram we have to add the same actor John Doe a second time, but now in his new role of &amp;#8220;device&amp;nbsp;maintainer&amp;#8221;:&lt;/p&gt;
&lt;img alt="uml diagram" class="uml" src="https://mindinthecloud.github.io/images/e7c260a4.png" /&gt;
&lt;p&gt;As most of us know by now, software is rarely flawless. See &lt;a class="reference external" href="https://www.cs.tau.ac.il/~nachumd/horror.html"&gt;this link&lt;/a&gt; for some horror stories. Updating the operating system of our computers has become an annoying but unavoidable part of our digital lives. The same is (or better: should be) true for the semi-autonomous devices in the Internet of Things. One major problem is that software flaws or bugs are not always repaired. Once a device is sold, there is not much of an incentive for a device maker to maintain its software beyond the period the devices are actually being sold. Yet, in our diagram we need to add the maintanance of the device. Someone at least has to provide updated software to users of these&amp;nbsp;devices.&lt;/p&gt;
&lt;p&gt;So again we need a new role: the &amp;#8220;firmware supplier&amp;#8221;. Usually this role is performed by the IoT device&amp;nbsp;supplier.&lt;/p&gt;
&lt;img alt="uml diagram" class="uml" src="https://mindinthecloud.github.io/images/cc408099.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="the-whole-picture"&gt;
&lt;h2&gt;The whole&amp;nbsp;picture&lt;/h2&gt;
&lt;p&gt;Now it is time to combine the two diagrams we&amp;nbsp;constructed:&lt;/p&gt;
&lt;img alt="uml diagram" class="uml" src="https://mindinthecloud.github.io/images/8d5f3a30.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We just created a diagram showing the different roles involved in the use of a &amp;#8216;thing&amp;#8217; in the Internet of Things. A device that gathers data about someone and uses a service to process the data for the owner into something that he percieves as valuable. What at first observation appears to be very simple, evolves into a model in which &lt;em&gt;John Doe performs no less than&lt;/em&gt; &lt;strong&gt;five&lt;/strong&gt; &lt;em&gt;different roles&lt;/em&gt;. And poor John thought he had only bought himself a&amp;nbsp;&amp;#8216;thing&amp;#8217;&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="IoT"></category><category term="UML"></category></entry><entry><title>The key overlap and the gap: IoT and IoS</title><link href="https://mindinthecloud.github.io/2016/05/the-key-overlap-and-the-gap-iot-and-ios/" rel="alternate"></link><published>2016-05-07T00:00:00+02:00</published><author><name>Rick Veenstra</name></author><id>tag:mindinthecloud.github.io,2016-05-07:2016/05/the-key-overlap-and-the-gap-iot-and-ios/</id><summary type="html">&lt;p&gt;The buzz around the &amp;#8216;Internet of Things&amp;#8217; is mainly caused because we seem
to have passed a major tipping point. Cheap to produce Systems-on-a-Chip
have reached levels of integration and computing power that enable running
serious functionality combined with a full &lt;span class="caps"&gt;IP&lt;/span&gt; network stack. We&amp;#8217;re facing
an explosion of inter-networked things. These things have mainly been
extensions of concepts we have been familiar with for decades. Heart-rate
monitors are not exactly a new idea; the form-factor of a watch and network
connectivity have just extended a concept we&amp;#8217;ve already known for decades.
The same with security cameras, thermostats and light bulbs. But that is
going to change rapidly. Who knows what brillant or downright amazing
solutions will be conceived for problems we didn&amp;#8217;t know we&amp;nbsp;had&amp;#8230;&lt;/p&gt;
&lt;p&gt;At the other side there has been an explosion of internet applications that
can be accessed using well-defined and publicly available APIs. A myrad
of interconnected applications has become available in recent years, mashed
together like never&amp;nbsp;before.&lt;/p&gt;
&lt;div class="section" id="where-iot-and-ios-meet"&gt;
&lt;h2&gt;Where IoT and IoS&amp;nbsp;meet&lt;/h2&gt;
&lt;p&gt;This is where the internet of things (IoT) and the internet of services
(IoS) connect. These things are sensors, information processors and devices
that enable interaction with the physical world. But their potential value
is only really unleashed when their data and functionality is processed and
enhanced by services. Sevices that are provided as web applications, more and
more extended with a user interface built as an app for your&amp;nbsp;smartphone.&lt;/p&gt;
&lt;p&gt;In many cases these services are provided by the same company that sold you
the device. Your purchase included these services; in fact a part of the
bill covered the cost of the services. You paid a one-time fee. But many of
these devices have a well-documented interface that can be handled by other
services as well. Services that are extremely cheap or even&amp;nbsp;free.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but"&gt;
&lt;h2&gt;But&amp;#8230;&lt;/h2&gt;
&lt;p&gt;Services have to be provided. Providing a service is an activity that
requires funding, significant funding. Equipment, people and resources
are still not avalable for free, at least not in countries that
participate in the global economy. Providing a service has to create
benefits for the provider. Tangible benefits such as monetary value or
cash flow. Or intangible benefits, such as knowledge, a change in
behaviour of people, future monetary benefits or whatever people may
deem valuable. Companies are very creative in finding ways to generate
financial revenues from these intangible benefits. There are myrads of services
that require no fee from its users. But you nevertheless pay for them, in many
cases by trading the one thing that has value to these companies. The one and
only thing that only you can create and that does not require
real effort: data about your and about your&amp;nbsp;behaviour.&lt;/p&gt;
&lt;p&gt;A service has a limited lifespan. Once you stop interacting with a service,
it will cease to create benefits for the provider. If the provider terminates
the service, it will cease to create benefits. If the provider ceases to
exist and the service is not tranfered to another provider, the service
will end and cease to create&amp;nbsp;benefits.&lt;/p&gt;
&lt;p&gt;Maybe the data the service has gathered remain valuable for the
service provider. Regardless of rights the provider has establised in
the terms of service, this value will degrade rapidly over&amp;nbsp;time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ios-generates-the-value-of-iot"&gt;
&lt;h2&gt;The IoS generates the value of&amp;nbsp;IoT&lt;/h2&gt;
&lt;p&gt;One could consider a &amp;#8216;thing&amp;#8217; in the context of the Internet of Things as
something that provides one or more services. The consumer of this service
usually is some other kind of &amp;#8216;service&amp;#8217; in the Internet of Services. So
while the device that collects the data (the actual &amp;#8216;thing&amp;#8217; in IoT) may be a
tangible object one can touch, cherish and throw out of the window, most
of its value is generated not by the device itself but by the services
it is connected to: the Internet of Services. Those services have a
lifespan that is only rather loosely related to the device. It is
mostly determined by the ways the service provider is able to
generate monetary benefits from these&amp;nbsp;service.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="IoT"></category></entry></feed>